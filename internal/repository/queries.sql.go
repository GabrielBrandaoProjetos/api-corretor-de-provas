// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :exec
INSERT INTO schools (id, name, register, unit, address, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING id, name, register, unit, address, created_at, updated_at
`

type CreateParams struct {
	ID        string
	Name      string
	Register  string
	Unit      string
	Address   string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.ID,
		arg.Name,
		arg.Register,
		arg.Unit,
		arg.Address,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM schools WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const findByID = `-- name: FindByID :one
SELECT id, name, register, unit, address, created_at, updated_at FROM schools WHERE id = $1 LIMIT 1
`

func (q *Queries) FindByID(ctx context.Context, id string) (School, error) {
	row := q.db.QueryRow(ctx, findByID, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Register,
		&i.Unit,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByRegister = `-- name: FindByRegister :one
SELECT id, name, register, unit, address, created_at, updated_at FROM schools WHERE register = $1 LIMIT 1
`

func (q *Queries) FindByRegister(ctx context.Context, register string) (School, error) {
	row := q.db.QueryRow(ctx, findByRegister, register)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Register,
		&i.Unit,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :exec
UPDATE schools SET name = $2, register = $3, unit = $4, address = $5, updated_at = $6 WHERE id = $1
`

type UpdateParams struct {
	ID        string
	Name      string
	Register  string
	Unit      string
	Address   string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.ID,
		arg.Name,
		arg.Register,
		arg.Unit,
		arg.Address,
		arg.UpdatedAt,
	)
	return err
}
